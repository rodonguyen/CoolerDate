openapi: 3.0.3
info:
  title: "CoolerDate: API Documentation"
  description: |-
    Codebase and further notes about the database schemas: [github.com/rodonguyen/CoolerDate](https://github.com/rodonguyen/CoolerDate)
  contact:
    email: rodonguyendd@gmail.com
  license:
    name: "MIT License"
    url: "https://spdx.org/licenses/MIT.html"
  version: 1.0.1
externalDocs:
  description: Find out more about rodonguyen
  url: http://rodonguyen.dev
servers:
  - url: "http://localhost:3001"
  - url: "https://coolerdate-production.up.railway.app"


components:
  schemas:
    coolerdate.code:
      type: object
      required:
        - username
        - code
        - profile
      properties:
        username:
          type: string
          description: Each `username` is the unique identity of each user in the app.
        code:
          type: string
          description: The `code` receiver uses to access a person's coolerdate page. Unique to each `username`.
        profile:
          type: string
          default: default
          description: Each (`username`, `profile`) is linked to a profile content that a user want to display for the associated `code`.
        firstAccessTime:
          type: string
          description: The time of the moment user first entering the code on app.
        hoursTookToSubmit:
          type: number
          description: The number of hours the receiver took to submit since they first opened the code.
      example:
        username: elonmusk
        code: youaregorgeous
        profile: default
        firstAccessTime: 2020-03-10T04:05:06.157Z
        hoursTookToSubmit: 0.12
    coolerdate.profile:
      type: object
      required:
        - username
        - profile
        - content
      properties:
        username:
          type: string
          description: Each `username` is the unique identity of each user in the app.
        profile:
          type: string
          description: Each (`username`, `profile`) is linked to a profile content that a user want to display for the associated `code`.
        content:
          type: array
          description: An array of paragraphs used for introduction.
          items: 
            type: string
      example:
        username: elonmusk
        profile: default
        content: ['paragraph1', 'paragraph2', 'paragraph3']
    coolerdate.respondent:
      type: object
      required:
        - username
        - code
        - name
        - contact
        - bio
      properties:
        username:
          type: string
          description: Each `username` is the unique identity of each user in the app.
        code:
          type: string
          description: The `code` respondent uses to access a person's coolerdate page. Unique to each `username`.
        name:
          type: array
          description: An array of paragraphs used for introduction.
          items: 
            type: string
        contact:
          type: string
          description: can be phone number or email.
        bio:
          type: string
          description: a self-description of the respondent.
        ifact:
          type: string
          description: some interesting facts about the respondent.
        place:
          type: string
          description: a place the respondent wants for their first date.
        dressing:
          type: string
          description: a dressing style the respondent wants from the user.
        boyfriend:
          type: string
          description: the respondent's ideal boyfriend description.
 
tags:
  - name: /coolerdate/code
    description: "Managing (`username`, `code`) information"
    externalDocs:
      description: Find out more
      url: https://github.com/rodonguyen/CoolerDate
  - name: /coolerdate/profile
    description: "Managing `profile` information"
    externalDocs:
      description: Find out more
      url: https://github.com/rodonguyen/CoolerDate
  - name: /coolerdate/respondent
    description: "Managing `respondent` information"
    externalDocs:
      description: Find out more
      url: https://github.com/rodonguyen/CoolerDate
      
paths:
  /coolerDate/code/add:
    post:
      summary: Create a new `code` for a `username`
      tags: [/coolerdate/code]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                username:
                  type: string
                  example: elonmusk
                code:
                  type: string
                  example: youaregorgeous
                profile:
                  type: string
                  example: default
              required:
                - username
                - code
      responses:
        200:
          description: The `code` exists for a `username`, do nothing 
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Entry exists, do nothing.
        201:
          description: Successfully add a new `code` for a `username`
          content:
            application/json:
              schema:
                properties:
                  username:
                    type: string
                    example: rodonguyen
                  code:
                    type: string
                    example: youaregorgeous
                  profile:
                    type: string
                    example: default
                  firstAccessTime: 
                    type: string
                    example: 
                  hoursTookToSubmit: 
                    type: number
                    example: -1
        400:
          description: Invalid input, missing required propertie(s) which is `code` in this case
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                    example: "coolerdate_code validation failed: code: Path `code` is required."
  /coolerDate/code/check:
    post:
      summary: Check the validity of a `code` of a `username`
      description: Check if a code is exist, unexpired, and unused. If the code is valid and does not have `firstAccessTime`, the server will assign `firstAccessTime` as the current time.
      tags: [/coolerdate/code]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                username:
                  type: string
                  example: elonmusk
                code: 
                  type: string
                  example: youaregorgeous
              required:
                - username
                - code
      responses:
        200:
          description: Successfully check a `code` for a `username`. Code is invalid.
          content:
            application/json:
              schema:
                properties:
                  isValid:
                    type: boolean
                    example: false  
        201:
          description: Successfully check a `code` for a `username`. Code is valid.
          content:
            application/json:
              schema:
                properties:
                  isValid:
                    type: boolean
                    example: true
                  entry:
                    properties: 
                      username: 
                        type: string
                        example: rodonguyen
                      code: 
                        type: string
                        example: youaregorgeous
                      profile: 
                        type: string
                        example: default
                      firstAccessTime: 
                        type: string
                        example: 2020-03-10T04:05:06.157Z
                      hoursTookToSubmit: 
                        type: number
                        example: -1
        400:
          description: Invalid input, missing required propertie(s) which is `code` in this case
          content:
            application/json:
              schema:
                properties:
                  isValid:
                    type: boolean
                    example: false
  /coolerDate/code/nullifyFirstAccessTime:
    patch:
      summary: "Nullify `firstAccessTime` of an entry if it exists."
      description: ...
      tags: [/coolerdate/code]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                username:
                  type: string
                  example: elonmusk
                code: 
                  type: string
                  example: youaregorgeous
              required:
                - username
                - code
      responses:
        201:
          description: Send request successfully.
          content:
            application/json:
              schema:
                oneOf:
                  - properties:
                      message:
                        type: string
                        example: "Nullify firstAccessTime successfully."  
                  - properties:
                      message:
                        type: string
                        example: "Entry does not exist, do nothing."  
        400:
          description: Bad request due to missing properties.
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Missing property (`username` or `code`). " 
  /coolerDate/code/patchProfile:
    patch:
      summary: "Update `profile` of an entry if it exists."
      description: ...
      tags: [/coolerdate/code]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                username:
                  type: string
                  example: "elonmusk"
                code: 
                  type: string
                  example: "youaregorgeous"
              required:
                - username
                - code
      responses:
        201:
          description: "Send request successfully."
          content:
            application/json:
              schema:
                oneOf:
                  - properties:
                      message:
                        type: string
                        example: "Patch `profile` successfully."
                  - properties:
                      message:
                        type: string
                        example: "Entry does not exist, do nothing." 
        400:
          description: "Bad request..."
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Error..." 
  /coolerDate/code/queryOne:
    post:
      summary: "Finding an entry with `username` and `code`."
      description: ...
      tags: [/coolerdate/code]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                username:
                  type: string
                  example: "elonmusk"
                code: 
                  type: string
                  example: "youaregorgeous"
              required:
                - username
                - code
      responses:
        200:
          description: "Send query request successfully."
          content:
            application/json:
              schema:
                oneOf:
                  - properties:
                      found:
                        type: boolean
                        example: true
                      entry:
                        $ref: '#/components/schemas/coolerdate.code'
                  - properties:
                      found:
                        type: boolean
                        example: false
                      request:
                        $ref: '#/components/schemas/coolerdate.code'
        400:
          description: "Error..."
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Error message..." 
  /coolerDate/code/deleteOne:
    post:
      summary: "Delete an entry with `username` and `code`."
      description: ...
      tags: [/coolerdate/code]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                username:
                  type: string
                  example: "elonmusk"
                code: 
                  type: string
                  example: "youaregorgeous"
              required:
                - username
                - code
      responses:
        201:
          description: "Send delete request successfully."
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Deleted entry." 
        400:
          description: "Error..."
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Error message..."
                    
                    
  /coolerDate/profile/add:
    post:
      summary: Create a new profile entry.
      description: Request body must have `username`, `profile`, and `content` properties.
      tags: [/coolerdate/profile]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/coolerdate.profile'
      responses:
        200:
          description: The `code` exists for a `username`, do nothing 
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Entry already exists, do nothing.
        201:
          description: Successfully add a new `code` for a `username`
          content:
            application/json:
              schema:
                oneOf:
                  - properties:
                      message:
                        type: string
                        example: "Updated the content."
                  - properties:
                      message:
                        type: string
                        example: "Add new `profile` entry."
        400:
          description: Error...
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                    example: "Error message..."
  /findOne:
    post:
      summary: Get content of an entry.
      description: Request body must have `username` and `profile` properties
      tags: [/coolerdate/profile]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                username:
                  type: string
                  example: elonmusk
                profile:
                  type: string
                  example: youaregorgeous
              required:
                - username
                - profile
      responses:
        201:
          description: Successfully retrieved the entry content for the specified (`username`, `profile`).
          content:
            application/json:
              schema:
                oneOf:
                  - properties:
                      found:
                        type: boolean
                        example: true
                        description: Indicates whether the entry was found.
                      entry:
                        $ref: '#/components/schemas/coolerdate.profile'
                  - properties:
                      found:
                        type: boolean
                        example: false
                        description: Indicates whether the entry was found.
                      request:
                        properties:
                          username:
                            type: string
                            example: elonmusk
                          profile:
                            type: string
                            example: youaregorgeous
                        
        400:
          description: Invalid request.
          content:
            application/json:
              schema:
                properties:
                  error: 
                    type: string
                    example: "Error message..."
                  
                  
                  
                  
                  
                  